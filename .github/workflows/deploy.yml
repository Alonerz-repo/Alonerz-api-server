name: Deploy to EB

on:
  pull_request:
    branches: [master]

jobs:
  build:
    name: CI Pipeline
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: ['16.x']

    steps:
      - uses: actions/checkout@v3

      # Install Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Install Node.js dependencies
      - name: Install dependencies
        run: npm install

      # Build Typescript
      - name: Run build
        run: npm run build

  deploy:
    name: CD Pipeline
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: ['16.x']
    needs: build
    steps:
      - uses: actions/checkout@v3

      # Create .env file
      - name: Create env file
        run: |
          touch .env
          echo TZ=Asia/Seoul >> .env
          echo PORT=8081 >> .env
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }} >> .env
          echo KAKAO_ADMIN_KEY=${{ secrets.KAKAO_ADMIN_KEY }} >> .env
          echo KAKAO_CLIENT_REDIRECT_URL=${{ secrets.KAKAO_CLIENT_REDIRECT_URL }} >> .env
          echo KAKAO_SERVER_REDIRECT_URL=${{ secrets.KAKAO_SERVER_REDIRECT_URL }} >> .env
          echo AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }} >> .env
          echo AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }} >> .env
          echo AWS_S3_REGION=${{ secrets.AWS_S3_REGION }} >> .env
          echo AWS_S3_PROFILE_BUCKET=${{ secrets.AWS_S3_PROFILE_BUCKET }} >> .env
          echo AWS_S3_GROUP_BUCKET=${{ secrets.AWS_S3_GROUP_BUCKET }} >> .env
          echo AWS_S3_ASSET_BUCKET=${{ secrets.AWS_S3_ASSET_BUCKET }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_DATABASE=${{ secrets.DB_DATABASE }} >> .env
          echo DB_SYNCHRONIZE=${{ secrets.DB_SYNCHRONIZE }} >> .env
          cat .env

      # Install Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Install Node.js dependencies
      - name: Install dependencies
        run: npm install

      # Build Typescript
      - name: Run build
        run: npm run build

      # Install AWS CLI 2
      - name: Install AWS CLI 2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          which aws
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Make to ZIP file with source code
      # -x에 해당하는 파일은 zip 파일 생성 시 제외
      - name: Generate deployment Beanstalk
        run: zip -r deploy.zip . -x '*.git*' './src/*' './aws/*' awscliv2.zip

      # Get Current Time
      - name: Get Current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD-HH-mm-ss
          utcOffset: '+09:00'

      # Deploy to Elastic Beanstalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.AWS_APPLICATION_NAME }}
          environment_name: ${{ secrets.AWS_ENVIRONMENT_NAME }}
          region: ${{ secrets.AWS_REGION }}
          version_label: ${{ steps.current-time.outputs.formattedTime }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 300
